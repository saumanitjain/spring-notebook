/*
 * Copyright (c) 2016, Oracle. All rights reserved.
 */

//__________________________________________________________//
//____________________BUILDSCRIPT AREA _____________________//
// Putting items in the buildscript closure ensures that the
// dependencies are available for use within the gradle build
// itself. Not the output program.
buildscript {

  ext {
    springBootVersion = "1.5.2.RELEASE"
    releaseVersion = "PI4"
    logbackVersion = "1.1.6"

  }
  repositories {
    maven { url "http://cgbu-nexus-dev.us.oracle.com:8081/nexus/content/groups/public/" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "http://repo.spring.io/plugins-release" }
  }
  dependencies {
    classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
    // this enables optional dependencies
    classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("se.transmode.gradle:gradle-docker:1.2")
    classpath("com.commercehub:gradle-cucumber-jvm-plugin:0.7")
    classpath("org.ajoberstar:grgit:1.1.0")
    classpath("gradle.plugin.org.detoeuf:swagger-codegen-plugin:1.7.4")
    classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1-rc3")
    classpath("oracle.communications:eclipselink-gradle-plugin:1.0.0")
  }
}

//__________________________________________________________//
//____________________PLUGIN AREA __________________________//
plugins {
  // the plugins DSL is replacing apply plugin over time for Java-plugins. It is therefore favoured over the legacy "apply plugin:" approach
  id "java"
  id "groovy"
  id "eclipse"
  id "idea"
  id "org.sonarqube" version "2.1-rc3"
  id "jacoco"
  id 'org.detoeuf.swagger-codegen' version '1.7.4'
}

//TODO get these plugins into the block above
apply plugin: "io.spring.dependency-management"
apply plugin: "org.springframework.boot"
apply plugin: "docker"
apply plugin: "cucumber-jvm"
apply plugin: "oracle.communications.eclipselink.staticweave"

configure(allprojects) {
  apply plugin: "propdeps"
  apply plugin: "propdeps-maven"
  apply plugin: "propdeps-idea"
  apply plugin: "propdeps-eclipse"
}

//__________________________________________________________//
//_____________ JAVA PLUGIN CONFIG AREA ___________________//
sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava{
  dependsOn processResources
  dependsOn ":swaggerCodeGen"
  source "${buildDir}/generated/src/main/java"
}

//__________________________________________________________//
//_______________VERSION INFO AREA _________________________//
ext {
  git = org.ajoberstar.grgit.Grgit.open(file('.'))
  revision = git.head().id
  buildNum = (System.getenv("BUILD_NUMBER") != null) ? System.getenv("BUILD_NUMBER") : 1
}

group 'com.oracle.communications.amplify'
version = buildNum + "-" + revision[0..11]
println "Setting version number to ${version}"

def ByteArrayOutputStream getDockerVersion() {
  def dockerVersion = new ByteArrayOutputStream()
  exec {
    executable 'docker'
    args 'version', '--format', '{{.Server.Version}}'
    standardOutput = dockerVersion
  }
  println "Docker Version: ${dockerVersion}"
  return dockerVersion
}

//__________________________________________________________//
//_______________Spring BOM AREA ___________________________//
//
// In this section you declare where to find the dependencies of your project
dependencyManagement {
  imports { mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.SR1" }
}

//__________________________________________________________//
//_______________JAR CONGIURATION___________________________//
//
jar { archiveName = "bizops-scheduler.jar" }

//__________________________________________________________//
//_______________SWAGGER CONFIGURATION______________________//
tasks.swagger.enabled = false
import org.detoeuf.SwaggerCodeGenTask


// swagger code generation wrapper task
// This adds input and output definitions to support gradle incremental
// builds as well as support for generating code from multiple swagger files
// in yaml or json format.
task swaggerCodeGen() {
  //dependsOn("swagger")
  description 'Generate domain java objects from the source YAML files.'
  def sourceFiles = fileTree(dir: "${rootDir}/src/main/resources/api", includes: ['**/*.yaml', '**/*.json'])

  inputs.source(sourceFiles)

  def generatedFileDir = "${buildDir}/generated/src/main/java"
  outputs.dir generatedFileDir

  doLast {

    // For domain model packages that do not agree with our opinion. The map allows the
    // specification of arbitrary domain model packages for code generation.
    // The key is api domain, i.e. the (lowercase) name of the swagger file without extension.
    Map<String, String> domainModelPkgMap = [ bizopsschedulerdatamodel: 'com.oracle.communications.amplify.bizops.scheduler.domain',
                                              bizopsnotificationdatamodel: 'com.oracle.communications.amplify.bizops.notification.domain'
                                            ]

    for (inputSpecFile in sourceFiles) {
      if(inputSpecFile.name.contains("DataModel")){
        // calcluating the generated model package name in the format
        // 'com.oracle.communications.{domain}.domain', e.g.
        // 'com.oracle.communications.subscription.domain'
        def apiDomain = inputSpecFile.name.replaceFirst(~/\.[^\.]+$/, '').toLowerCase()
        println "apiDomain --> " + apiDomain
        def domainPkg = domainModelPkgMap[apiDomain] ? domainModelPkgMap[apiDomain] : 'com.oracle.communications.' + apiDomain + '.domain'
        println 'Generating scheduler domain model from: ' + inputSpecFile.absolutePath

        task "swaggerCG${inputSpecFile.name.hashCode()}"(type: SwaggerCodeGenTask) {
          swagger {
            cleanOutputDir = false
            inputSpec = inputSpecFile.absolutePath
            outputDir = "${buildDir}/generated"
            lang = "spring"
            systemProperties = [
              'models' : ''
            ]
            additionalProperties = [
              "modelPackage": domainPkg,
              "dateLibrary": "custom",
              "serializableModel": true
            ]
            typeMappings = [
              'DateTime': 'Instant',
              'TaskDefinition': 'TaskDefinition',
              'SchedulerInfo': 'SchedulerInfo'
            ]
            importMappings = [
              'Instant': 'java.time.Instant',
              'TaskDefinition': 'com.oracle.communications.amplify.bizops.scheduler.model.taskdefinition.TaskDefinition',
              'SchedulerInfo':'com.oracle.communications.amplify.bizops.scheduler.model.SchedulerInfo'
            ]
          }
        }

        tasks."swaggerCG${inputSpecFile.name.hashCode()}".execute()
      }
    }
  }
}

//__________________________________________________________//
//_______________SOURCESETS AREA ___________________________//
sourceSets {
  main {
    java {
      srcDirs += "build/generated/src/main/java"
    }
  }
  unitTest {
    java { srcDir 'src/test/groovy' }
    resources { srcDir 'src/test/resources' }
    compileClasspath += sourceSets.main.runtimeClasspath
  }
  //New source set for contract test
  contractTest {
    java { srcDir 'build/generated-test-sources/contracts' }
    compileClasspath += sourceSets.main.runtimeClasspath
    compileClasspath += sourceSets.test.compileClasspath
    runtimeClasspath += sourceSets.test.runtimeClasspath
  }

  cucumberTest {
    java { srcDir  'src/test/QE/cucumberTest/java' }
    resources { srcDir  'src/test/QE/cucumberTest/resources' }
    compileClasspath += sourceSets.main.runtimeClasspath
    compileClasspath += sourceSets.test.compileClasspath
  }
}

// Task for contractTest
task contractTest(type: Test) {
  //dependsOn generateContractTests
  mustRunAfter test
  testLogging { events "failed", "skipped" }
  testClassesDir = sourceSets.contractTest.output.classesDir
  classpath = sourceSets.contractTest.runtimeClasspath
}

check.dependsOn contractTest

dependencies { contractTestCompile sourceSets.test.output }

//__________________________________________________________//
//_____________ WRAPPER TASK CONFIG AREA ___________________//
task wrapper(type: Wrapper) { gradleVersion = "3.0" // higher Gradle version not supported by Cukes plugin
}

//__________________________________________________________//
//_____________ DOCKER TASK CONFIG AREA ___________________//
task buildDocker(type: Docker, dependsOn: build) {

  String dockerRegistryURL = System.properties['docker.registry.host.url']
  String dockerRegistryLogin = System.properties['docker.registry.login']
  String dockerRegistryPassword = System.properties['docker.registry.password']

  registry = dockerRegistryURL
  applicationName = "amplify/bizops-scheduler"
  tagVersion = "latest"
  dockerfile = file("src/main/docker/Dockerfile")
  doFirst {
    copy {
      from jar
      into stageDir
    }
    copy {
      from configurations.waitForDB
      into stageDir
    }
    exec {
      executable 'docker'
      args 'login', '-u', dockerRegistryLogin, '-p', dockerRegistryPassword, dockerRegistryURL
    }
  }
  doLast {
    exec {
      executable 'docker'
      args 'logout', dockerRegistryURL
    }
  }
}

//__________________________________________________________//
//__________ DOCKER PUBLISH IMAGE CONFIG AREA ___________//
task publishImage(dependsOn: buildDocker) {

  String dockerRegistryURL = System.properties['docker.registry.host.url']
  String dockerRegistryLogin = System.properties['docker.registry.login']
  String dockerRegistryPassword = System.properties['docker.registry.password']
  String applicationName = "amplify/bizops-scheduler"
  boolean skipLogin = System.properties['docker.registry.login.skip'].toBoolean()

  doFirst {
    if (!skipLogin) {
      exec {
        executable 'docker'
        args 'login', '-u', dockerRegistryLogin, '-p', dockerRegistryPassword, dockerRegistryURL
      }
    }

    String buildLatestImageTagName = "${dockerRegistryURL}/${applicationName}:latest"
    String buildSpecificImageTagName = "${dockerRegistryURL}/${applicationName}:${version}"

    exec {
      executable 'docker'
      args 'tag', buildLatestImageTagName, buildSpecificImageTagName
    }
    // publish with latest tag
    exec {
      executable 'docker'
      args 'push', buildLatestImageTagName
    }
    // publish with release tag
    exec {
      executable 'docker'
      args 'push', buildSpecificImageTagName
    }
  }
  doLast {
    if (!skipLogin) {
      exec {
        executable 'docker'
        args 'logout', dockerRegistryURL
      }
    }
  }
}

//__________________________________________________________//
//_____________ Enable JPA Static Weaving___________________//
tasks.withType(JavaCompile){
  doLast{
    tasks.weave.execute()
  }
}

//__________________________________________________________//
//_____________ TEST CONFIG SETTINGS AREA __________________//
test {
  reports {
    junitXml.enabled = true
    html.enabled = true
  }
  testLogging { // Show that tests are run in the command-line output
    events 'passed' // 'started' is also an option
  }
}

//Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
  reports.html.destination = file("${reporting.baseDir}/${name}")
}

//__________________________________________________________//
//_____________ SONAR PLUGIN CONFIG AREA ___________________//
sonarqube {
  properties {
    property "sonar.projectName", "AMPLIFY_${rootProject.name}"
    property "sonar.projectVersion", "${releaseVersion}"
    property "sonar.host.url", "http://localhost:9000"
    property "sonar.login", "admin"
    property "sonar.password", "admin"
    property "sonar.buildbreaker.skip","false"
    property "sonar.java.coveragePlugin", "jacoco"
    property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec" // path to coverage data
    property "sonar.exclusions", "**/build/**, src/main/java/com/oracle/communications/amplify/bizops/scheduler/notification/domain/*, src/main/java/com/oracle/communications/amplify/bizops/scheduler/config/EclipseLinkConfiguration.java, src/main/java/com/oracle/communications/amplify/bizops/scheduler/Application.java, src/main/java/com/oracle/communications/amplify/bizops/scheduler/config/QuartzConfig.java"

  }
}

//__________________________________________________________//
//___________________ JACOCO PLUGIN CONFIG AREA ____________//
jacoco { toolVersion = "0.7.6.201602180812" }

jacocoTestReport {
  group = "Reporting"
  reports {
    xml.enabled true
    html.destination "${buildDir}/reports/coverage"
  }
}

//__________________________________________________________//
//_____________ SHORTHAND UNIT_TEST TASK _________________//
// Task builds and runs all unit tests from "ut" target
// eg. "gradle ut"
task ut(dependsOn: ['clean', 'test']) {
}

//__________________________________________________________//
//_________________ CUCUMBER CONFIG AREA  _________________//
addCucumberSuite 'cucumberTest'
addCucumberSuite 'QE/cucumberTest'

cucumber { maxParallelForks = 1 }
cucumberTest {
  group = "Verification"
  description 'Runs the Acceptance Tests via connecting to a running system.'
  stepDefinitionRoots = ['classpath:com/oracle/communications']
  junitReport = true
  //if turned on it will fail for undefined or pending steps
  //isStrict = true
  tags = ['~@WIP']
  if (project.hasProperty('cucumberTags')) {
    tags = [cucumberTags]
  }

  //pass thru the parameters from the command line if they are specified
  if (project.hasProperty('hostname')) {
    systemProperties = [host: hostname, port: port]
  }
}

//needed to do this so we only display this message if the cucumberTest task was run
cucumberTest.doLast {
  if (tasks.cucumberTest.didWork) {
    println 'Running Cucumber tests with tag of: ' + tags
  }
}


configurations {
  cucumberTestCompile.extendsFrom testCompile
  cucumberTestRuntime.extendsFrom testRuntime
  waitForDB
  all*.exclude group: "org.hibernate", module: "hibernate-entitymanager"
  contractTestCompile.extendsFrom testCompile
  contractTestRuntime.extendsFrom testRuntime
}

//__________________________________________________________//
//____________________DEPENDENCIES AREA ____________________//
dependencies {
  optional(
      'org.springframework.boot:spring-boot-configuration-processor' // needed to support custom yml properties binding with syntax checking in Eclipse/IntelliJ
      )

  compile(
      'org.springframework.boot:spring-boot-starter-data-jpa',
      'org.springframework.boot:spring-boot-starter-web',
      'org.springframework.data:spring-data-commons',              // needed for spring cloud
      'org.springframework.cloud:spring-cloud-starter-config',     // needed for spring cloud
      'org.springframework.cloud:spring-cloud-starter-eureka',     // needed for spring cloud
      'org.springframework.cloud:spring-cloud-starter-sleuth',     // needed for spring cloud
      'org.springframework.cloud:spring-cloud-sleuth-zipkin',      // needed for spring cloud
      'com.netflix.hystrix:hystrix-javanica',                      // needed for spring cloud
      'org.springframework.boot:spring-boot-starter-aop',          // needed for spring cloud
      'org.eclipse.persistence:org.eclipse.persistence.jpa:2.6.4',
      'org.springframework:spring-orm',
      'mysql:mysql-connector-java:5.1.23',                         // needed for MySQL connector
      'org.springframework:spring-jdbc',                           // needed for MySQL Java
      'com.oracle.jdbc:ojdbc7:12.1.0.2',                           // needed for Oracle 12c
      'oracle.communications:eclipselink-gradle-plugin:1.0.0',
      'com.fasterxml.jackson.core:jackson-databind:2.8.4',
      'org.quartz-scheduler:quartz:2.2.3',
      'org.quartz-scheduler:quartz-jobs:2.2.3',
      'org.springframework:spring-context-support',
      'c3p0:c3p0:0.9.1.1',
      'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.4',
      'javax.json:javax.json-api:1.0',                            // needed for Cucumber Acceptance Testing
      'info.cukes:cucumber-junit:1.2.5',                          // test-commons
      'info.cukes:cucumber-java:1.2.4',                           // needed for Cucumber Acceptance Testing
      'com.oracle.communications.amplify:test-commons:1.0.0-SNAPSHOT:test',
      'io.swagger:swagger-annotations:1.5.16',
      'net.logstash.logback:logstash-logback-encoder:4.6',
      'com.oracle.communications.amplify.workspace:workspace-client:1.0.0-SNAPSHOT'
      )

  //swaggerCompile "org.springframework.boot:spring-boot-starter-web"

  testCompile(
      'org.springframework.boot:spring-boot-starter-test',        // needed for spring
      'junit:junit:4.12',                                         // needed for Spock UnitTests
      'org.codehaus.groovy:groovy-all:2.4.9',                     // needed for Spock UnitTests
      'org.spockframework:spock-core:1.0-groovy-2.4',             // needed for Spock UnitTests
      'cglib:cglib-nodep:2.2',                                    // needed to mock non-Interfaces
      'org.objenesis:objenesis:1.2',                              // needed to mock non-Interfaces
      'info.cukes:cucumber-java:1.2.4',                           // needed for Cucumber Acceptance Testing
      'org.glassfish.jersey.media:jersey-media-json-jackson:2.24',// needed for Cucumber Acceptance Testing
      'org.glassfish:javax.json:1.0.4',                           // needed for Cucumber Acceptance Testing
      'javax.json:javax.json-api:1.0',                            // needed for Cucumber Acceptance Testing
      'commons-jxpath:commons-jxpath:1.3',                        // needed for Cucumber Acceptance Testing
      'org.glassfish.jersey.core:jersey-client:2.23.2',           // needed for Cucumber Acceptance Testing
      'info.cukes:cucumber-junit:1.2.5',                          // needed for QE Framework
      //Added below file for QE framework
      'javax.json:javax.json-api:1.0',                            // needed for Cucumber Acceptance Testing
      'info.cukes:cucumber-java:1.2.4',                           // needed for Cucumber Acceptance Testing
      'com.oracle.communications.amplify:test-commons:1.0.0-SNAPSHOT:test',
      'org.apache.poi:poi:3.14',
      'org.apache.poi:poi-ooxml:3.10-beta2'
      )

  testRuntime(
      'com.h2database:h2:1.4.182',
      'com.google.code.gson:gson:2.7'                   //needed for QE Framework
      )

  waitForDB(
      'com.oracle.jdbc:ojdbc7:12.1.0.2',
      'oracle.communications:WaitForDb:1.0.0'
      )
  //__________________________________________________________//
  //______________ REPOSITORY AREA ___________________________//
  repositories {
    maven { url "http://cgbu-nexus-dev.us.oracle.com:8081/nexus/content/groups/public/" }
    //jersey needs to get it from outside
    maven { url "https://plugins.gradle.org/m2/" }
  }

}